/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled 2"
  https://create.arduino.cc/cloud/things/ac04ba35-f63e-4fb5-8da6-3c5d56f04205

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float cloudCelsius;
  float cloudLux;
  float cloudMoisture;
  int type;
  bool light;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "DHT.h"

#include <BH1750.h>
#include <Wire.h>

#define DHTPIN 14
#define DHTTYPE DHT11
#define moisture_pin 36  /* Soil moisture sensor O/P pin */
#define pump_pin_in1 33
#define led_pin_in2 32

BH1750 lightMeter;

float analog_moisture;
float celsius;
float humidity;
float lux;
float moisture;

int refLight_h,refLight_l;
int refWater_h,refWater_l;

DHT dht(DHTPIN, DHTTYPE); // constructor to declare our sensor

void system_init(void)
{
  dht.begin();
  Wire.begin();
  lightMeter.begin();
  pinMode(pump_pin_in1, OUTPUT);
  pinMode(led_pin_in2, OUTPUT);
  digitalWrite(led_pin_in2, LOW);
  digitalWrite(pump_pin_in1, LOW);
}

void watering(void)
{
  digitalWrite(pump_pin_in1, HIGH);
  delay(500);
  digitalWrite(pump_pin_in1, LOW);
  delay(10000);

}

void light_status(int on_off)
{
  digitalWrite(led_pin_in2, on_off);
  light=on_off;
}
void getData(float *temp, float *humid, float *moist, float *light)
{
  *humid = dht.readHumidity();
  *temp = dht.readTemperature();
  analog_moisture = analogRead(moisture_pin);
  *moist = ( 100 - ( (analog_moisture / 4095.00) * 100 ) );
  *light = lightMeter.readLightLevel();
}
void serial_print(float *temp, float *humid, float *moist, float *light)
{
  if (isnan(humidity) || isnan(celsius)) {
    Serial.println("Failed reception");
    return;
    //Returns an error if the ESP32 does not receive any measurements
  }
  Serial.print("Humidite: ");
  Serial.print(humidity);
  Serial.print("%  Temperature: ");
  Serial.print(celsius);
  Serial.print("°C ");


  Serial.print("Moisture = ");
  Serial.print(moisture);  /* Print Temperature on the serial window */
  Serial.print("%   ");


  Serial.print("Light: ");
  Serial.print(lux);
  Serial.println(" lx");
}
void routine(float *moist, float *light)
{
  if ((*light > refLight_l)&&(*light < refLight_h))
  {
    light_status(1);
    Serial.println("Light on");
  }
  else
  {
    light_status(0);
    Serial.println("Light off");
  }
  if ((*moist > refWater_l) &(*moist < refWater_h))
  {
    Serial.println("Watering\n");
    watering();
  }
  else
  {
    Serial.println("Pump off\n");
  }
}
void typeSelector(void)
{
  if(type==1)// Crassula argentea: H L L
  {
    refLight_h=10000;
    refLight_l=1614;
    refWater_h=30;
    refWater_l=0;
  }
  if(type==2)// Chlorophytum comosum: H M M
  {
    refLight_h=10000;
    refLight_l=1614;
    refWater_h=70;
    refWater_l=30;
  }
  if(type==3)// Peperomia caperata: M M H
  {
    refLight_h=1614;
    refLight_l=800;
    refWater_h=110;
    refWater_l=70;
  }
}
void setup()
{
  Serial.begin(9600);
  system_init();
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  delay(2000);
  getData(&celsius, &humidity, &moisture, &lux);
  serial_print(&celsius, &humidity, &moisture, &lux);
  routine(&moisture, &lux);
  cloudCelsius = celsius;
  cloudLux = lux;
  cloudMoisture = moisture;
}

void onCloudCelsiusChange()  {
  // Add your code here to act upon CloudCelsius change

}


/*
  Since CloudHumidity is READ_WRITE variable, onCloudHumidityChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onCloudHumidityChange()  {
  // Add your code here to act upon CloudHumidity change
}

/*
  Since CloudLux is READ_WRITE variable, onCloudLuxChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onCloudLuxChange()  {
  // Add your code here to act upon CloudLux change
}


/*
  Since CloudMoisture is READ_WRITE variable, onCloudMoistureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onCloudMoistureChange()  {
  // Add your code here to act upon CloudMoisture change

}







/*
  Since Type is READ_WRITE variable, onTypeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTypeChange()  {
  // Add your code here to act upon Type change
    typeSelector();
}
